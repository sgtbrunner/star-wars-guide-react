{"version":3,"sources":["redux/characters/characters.types.js","utils/constants.utils.js","redux/characters/characters.reducer.js","redux/dialog/dialog.types.js","redux/dialog/dialog.reducer.js","redux/films/films.types.js","redux/films/films.reducer.js","redux/planets/planets.types.js","redux/planets/planets.reducer.js","redux/species/species.types.js","redux/species/species.reducer.js","redux/root-reducer.js","redux/store.js","utils/api.utils.js","utils/functions.utils.js","redux/characters/characters.actions.js","redux/films/films.actions.js","redux/planets/planets.actions.js","redux/species/species.actions.js","components/Dialog/dialog.component.jsx","components/Dialog/index.js","redux/dialog/dialog.actions.js","components/Blocks/Footer/index.js","components/Blocks/Footer/footer.component.jsx","assets/img/logo.png","components/Blocks/Header/index.js","components/Blocks/Header/header.component.jsx","components/Card/card.component.jsx","components/Card/index.js","components/Cardlist/index.js","components/Cardlist/cardlist.component.jsx","components/SearchBox/index.js","components/SearchBox/searchbox.component.jsx","components/Blocks/Main/main.component.jsx","components/Blocks/Main/index.js","components/Loader/index.js","components/Loader/loader.component.jsx","App/App.js","App/index.js","index.js"],"names":["charactersActionTypes","LOAD_CHARACTERS_START","LOAD_CHARACTERS_SUCCESS","LOAD_CHARACTERS_FAILURE","INITIAL_STATE","isLoading","data","error","charactersReducer","state","action","type","payload","dialogActionTypes","OPEN_DIALOG","CLOSE_DIALOG","isOpen","characterId","dialogReducer","filmsActionTypes","LOAD_FILMS_START","LOAD_FILMS_SUCCESS","LOAD_FILMS_FAILURE","filmsReducer","planetActionTypes","LOAD_PLANET_START","LOAD_PLANET_SUCCESS","LOAD_PLANET_FAILURE","planetsReducer","speciesActionTypes","LOAD_SPECIES_START","LOAD_SPECIES_SUCCESS","LOAD_SPECIES_FAILURE","speciesReducer","persistConfig","key","storage","blacklist","rootReducer","combineReducers","characters","films","planets","species","dialog","persistReducer","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","fetchData","a","path","url","resource","fetch","method","headers","then","response","json","push","results","next","getIdParamFromUrl","parseInt","replace","mapArrayPropertyToId","item","getImageUrl","index","updateCharactersProperties","map","character","id","homeworld","vehicles","starships","loadCharactersSuccess","loadCharacters","dispatch","api","loadFilmsSuccess","loadFilms","loadPlanetsSuccess","loadPlanets","loadSpeciesSuccess","loadSpecies","deserializeStatsList","list","name","title","join","Dialog","string","isDialogDataLoaded","closeDialog","DIALOG_STATS","value","gender","toUpperCase","slice","birth_year","height","unit","mass","useEffect","events","closeOnEvent","event","keyCode","target","forEach","window","addEventListener","removeEventListener","className","onClick","src","alt","stat","length","every","itemLength","connect","document","body","style","overflowY","Footer","href","rel","Header","swCover","Card","openDialog","card","cardId","Number","CardList","SearchBox","searchChange","placeholder","onChange","Main","useState","searchField","setSearchField","filteredCharacters","filter","toLowerCase","includes","defaultProps","Loader","App","isCharactersLoading","showDialog","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ae2020c7.chunk.js","sourcesContent":["const charactersActionTypes = {\n  LOAD_CHARACTERS_START: 'LOAD_CHARACTERS_START',\n  LOAD_CHARACTERS_SUCCESS: 'LOAD_CHARACTERS_SUCCESS',\n  LOAD_CHARACTERS_FAILURE: 'LOAD_CHARACTERS_FAILURE',\n};\n\nexport default charactersActionTypes;\n","export const BASE_API_URL = 'https://swapi.dev/api/';\nexport const BASE_IMAGE_URL = 'https://starwars-visualguide.com/assets/img/characters/';\nexport const FILMS = 'films';\nexport const PEOPLE = 'people';\nexport const PLANETS = 'planets';\nexport const SPECIES = 'species';\nexport const STARSHIPS = 'starships';\nexport const VEHICLES = 'vehicles';\n\nexport const INITIAL_STATE = {\n  isLoading: false,\n  data: [],\n  error: null,\n};\n","import charactersActionTypes from './characters.types';\nimport { INITIAL_STATE } from '../../utils/constants.utils';\n\nconst charactersReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case charactersActionTypes.LOAD_CHARACTERS_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case charactersActionTypes.LOAD_CHARACTERS_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case charactersActionTypes.LOAD_CHARACTERS_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default charactersReducer;\n","const dialogActionTypes = {\n  OPEN_DIALOG: 'OPEN_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n};\n\nexport default dialogActionTypes;\n","import dialogActionTypes from './dialog.types';\n\nconst INITIAL_STATE = {\n  isOpen: false,\n  characterId: null,\n};\n\nconst dialogReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case dialogActionTypes.OPEN_DIALOG:\n      return {\n        ...state,\n        isOpen: true,\n        characterId: action.payload,\n      };\n    case dialogActionTypes.CLOSE_DIALOG:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dialogReducer;\n","export const filmsActionTypes = {\n  LOAD_FILMS_START: 'LOAD_FILMS_START',\n  LOAD_FILMS_SUCCESS: 'LOAD_FILMS_SUCCESS',\n  LOAD_FILMS_FAILURE: 'LOAD_FILMS_FAILURE',\n};\n\nexport default filmsActionTypes;\n","import { filmsActionTypes } from './films.types';\nimport { INITIAL_STATE } from '../../utils/constants.utils';\n\nconst filmsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case filmsActionTypes.LOAD_FILMS_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case filmsActionTypes.LOAD_FILMS_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case filmsActionTypes.LOAD_FILMS_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filmsReducer;\n","const planetActionTypes = {\n  LOAD_PLANET_START: 'LOAD_PLANET_START',\n  LOAD_PLANET_SUCCESS: 'LOAD_PLANET_SUCCESS',\n  LOAD_PLANET_FAILURE: 'LOAD_PLANET_FAILURE',\n};\n\nexport default planetActionTypes;\n","import planetActionTypes from './planets.types';\nimport { INITIAL_STATE } from '../../utils/constants.utils';\n\nconst planetsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case planetActionTypes.LOAD_PLANET_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case planetActionTypes.LOAD_PLANET_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case planetActionTypes.LOAD_PLANET_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default planetsReducer;\n","const speciesActionTypes = {\n  LOAD_SPECIES_START: 'LOAD_SPECIES_START',\n  LOAD_SPECIES_SUCCESS: 'LOAD_SPECIES_SUCCESS',\n  LOAD_SPECIES_FAILURE: 'LOAD_SPECIES_FAILURE',\n};\n\nexport default speciesActionTypes;\n","import speciesActionTypes from './species.types';\nimport { INITIAL_STATE } from '../../utils/constants.utils';\n\nconst speciesReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case speciesActionTypes.LOAD_SPECIES_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case speciesActionTypes.LOAD_SPECIES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case speciesActionTypes.LOAD_SPECIES_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default speciesReducer;\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport charactersReducer from './characters/characters.reducer';\nimport dialogReducer from './dialog/dialog.reducer';\nimport filmsReducer from './films/films.reducer';\nimport planetsReducer from './planets/planets.reducer';\nimport speciesReducer from './species/species.reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['dialog'],\n};\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n  films: filmsReducer,\n  planets: planetsReducer,\n  species: speciesReducer,\n  dialog: dialogReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [thunk];\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","import { BASE_API_URL } from './constants.utils';\n\nconst fetchData = async ({ path, url, resource }) => {\n  await fetch(url || `${BASE_API_URL}${path}`, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' },\n  })\n    .then((response) => response.json())\n    .then(async (data) => {\n      resource.push(...data.results);\n      if (data.next) await fetchData({ url: data.next, resource });\n    });\n  return resource;\n};\n\nexport default {\n  getData: (path) => fetchData({ path, resource: [] }),\n};\n","import { BASE_IMAGE_URL } from './constants.utils';\n\nconst getIdParamFromUrl = (url) => parseInt(url.replace(/\\D/g, ''), 10);\n\nconst mapArrayPropertyToId = (item) => getIdParamFromUrl(item);\n\nexport const capitalizeFirstLetter = (string) => string[0].toUpperCase() + string.slice(1);\n\nexport const getImageUrl = (index) => `${BASE_IMAGE_URL}${index < 16 ? index + 1 : index + 2}.jpg`;\n\nexport const updateCharactersProperties = (data) =>\n  data.map((character, index) => ({\n    id: index,\n    ...character,\n    homeworld: getIdParamFromUrl(character.homeworld),\n    films: character.films.map(mapArrayPropertyToId),\n    species: character.species.map(mapArrayPropertyToId),\n    vehicles: character.vehicles.map(mapArrayPropertyToId),\n    starships: character.starships.map(mapArrayPropertyToId),\n  }));\n","import charactersActionTypes from './characters.types';\nimport api from '../../utils/api.utils';\nimport { PEOPLE } from '../../utils/constants.utils';\nimport { updateCharactersProperties } from '../../utils/functions.utils';\n\nconst loadCharactersStart = () => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_START,\n});\n\nconst loadCharactersSuccess = (characters) => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_SUCCESS,\n  payload: characters,\n});\n\nconst loadCharactersFailure = (error) => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_FAILURE,\n  payload: error,\n});\n\nconst loadCharacters = async (dispatch) => {\n  dispatch(loadCharactersStart());\n\n  try {\n    const data = await api.getData(PEOPLE);\n    const characters = updateCharactersProperties(data);\n    dispatch(loadCharactersSuccess(characters));\n  } catch (error) {\n    dispatch(loadCharactersFailure(error));\n  }\n};\n\nexport default loadCharacters;\n","import { filmsActionTypes } from './films.types';\nimport api from '../../utils/api.utils';\nimport { FILMS } from '../../utils/constants.utils';\n\nconst loadFilmsStart = () => ({\n  type: filmsActionTypes.LOAD_FILMS_START,\n});\n\nconst loadFilmsSuccess = (films) => ({\n  type: filmsActionTypes.LOAD_FILMS_SUCCESS,\n  payload: films,\n});\n\nconst loadFilmsError = (error) => ({\n  type: filmsActionTypes.LOAD_FILMS_FAILURE,\n  payload: error,\n});\n\nconst loadFilms = async (dispatch) => {\n  dispatch(loadFilmsStart());\n  try {\n    const films = await api.getData(FILMS);\n    dispatch(loadFilmsSuccess(films));\n  } catch (error) {\n    dispatch(loadFilmsError(error));\n  }\n};\n\nexport default loadFilms;\n","import planetActionTypes from './planets.types';\nimport api from '../../utils/api.utils';\nimport { PLANETS } from '../../utils/constants.utils';\n\nconst loadPlanetsStart = () => ({\n  type: planetActionTypes.LOAD_PLANET_START,\n});\n\nconst loadPlanetsSuccess = (planets) => ({\n  type: planetActionTypes.LOAD_PLANET_SUCCESS,\n  payload: planets,\n});\n\nconst loadPlanetsFailure = (error) => ({\n  type: planetActionTypes.LOAD_PLANET_FAILURE,\n  payload: error,\n});\n\nconst loadPlanets = async (dispatch) => {\n  dispatch(loadPlanetsStart());\n\n  try {\n    const planets = await api.getData(PLANETS);\n    dispatch(loadPlanetsSuccess(planets));\n  } catch (error) {\n    dispatch(loadPlanetsFailure(error));\n  }\n};\n\nexport default loadPlanets;\n","import speciesActionTypes from './species.types';\nimport api from '../../utils/api.utils';\nimport { SPECIES } from '../../utils/constants.utils';\n\nconst loadSpeciesStart = () => ({\n  type: speciesActionTypes.LOAD_SPECIES_START,\n});\n\nconst loadSpeciesSuccess = (species) => ({\n  type: speciesActionTypes.LOAD_SPECIES_SUCCESS,\n  payload: species,\n});\n\nconst loadSpeciesFailure = (error) => ({\n  type: speciesActionTypes.LOAD_SPECIES_FAILURE,\n  payload: error,\n});\n\nconst loadSpecies = async (dispatch) => {\n  dispatch(loadSpeciesStart());\n\n  try {\n    const species = await api.getData(SPECIES);\n    dispatch(loadSpeciesSuccess(species));\n  } catch (error) {\n    dispatch(loadSpeciesFailure(error));\n  }\n};\n\nexport default loadSpecies;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getImageUrl, capitalizeFirstLetter } from '../../utils/functions.utils';\nimport './dialog.styles.css';\n\nconst deserializeStatsList = (list, type) =>\n  list.map((item) => type[item - 1]?.name || type[item - 1]?.title).join(', ');\n\nconst Dialog = ({\n  characterId,\n  characters,\n  films,\n  planets,\n  species,\n  isDialogDataLoaded,\n  closeDialog,\n}) => {\n  const character = characters[characterId];\n  const DIALOG_STATS = isDialogDataLoaded && [\n    {\n      name: 'Species',\n      value: deserializeStatsList(character.species, species) || 'Human',\n    },\n    { name: 'Gender', value: capitalizeFirstLetter(character.gender) },\n    { name: 'Birth Year', value: character.birth_year },\n    { name: 'Height', value: character.height, unit: 'cm' },\n    { name: 'Weight', value: character.mass, unit: 'Kg' },\n    { name: 'Homeworld', value: planets[character.homeworld - 1].name },\n    { name: 'Films', value: deserializeStatsList(character.films, films) },\n  ];\n\n  useEffect(() => {\n    const events = ['click', 'keydown'];\n    const closeOnEvent = (event) => {\n      if (event.keyCode === 27 || event.target.id === 'overlay') closeDialog();\n    };\n\n    events.forEach((event) => window.addEventListener(event, closeOnEvent));\n    return () => events.forEach((event) => window.removeEventListener(event, closeOnEvent));\n  }, [closeDialog]);\n\n  return (\n    <div className=\"overlay\" id=\"overlay\">\n      {!isDialogDataLoaded ? (\n        <div className=\"dialog-load\">\n          <div className=\"dialog-loader\" />\n        </div>\n      ) : (\n        <div className=\"dialog-content\">\n          <span className=\"close\">\n            <button type=\"button\" className=\"bn pointer bg-transparent\" onClick={closeDialog}>\n              &times;\n            </button>\n          </span>\n          <div className=\"stats-list\">\n            <img src={getImageUrl(character.id)} className=\"portrait\" alt={character.id} />\n            <div className=\"char-name\">{character.name}</div>\n            {DIALOG_STATS.map((stat) => (\n              <div className=\"stats\" key={stat.name}>\n                <u>{stat.name}</u>\n                {`: ${stat.value} ${stat.unit && stat.value !== 'unknown' ? stat.unit : ''}`}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nDialog.propTypes = {\n  characterId: PropTypes.number.isRequired,\n  characters: PropTypes.array.isRequired,\n  films: PropTypes.array.isRequired,\n  planets: PropTypes.array.isRequired,\n  species: PropTypes.array.isRequired,\n  isDialogDataLoaded: PropTypes.bool.isRequired,\n  closeDialog: PropTypes.func.isRequired,\n};\n\nexport default Dialog;\n","import { connect } from 'react-redux';\n\nimport { closeDialog } from '../../redux/dialog/dialog.actions';\nimport Dialog from './dialog.component';\n\nconst isDialogDataLoaded = (state) => {\n  const { films, planets, species } = state;\n  return [films.data.length, planets.data.length, species.data.length].every(\n    (itemLength) => itemLength\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  characterId: state.dialog.characterId,\n  characters: state.characters.data,\n  films: state.films.data,\n  planets: state.planets.data,\n  species: state.species.data,\n  isDialogDataLoaded: isDialogDataLoaded(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  closeDialog: () => closeDialog(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dialog);\n","import dialogActionTypes from './dialog.types';\n\nexport const openDialog = (dispatch, cardId) => {\n  document.body.style.overflowY = 'hidden';\n\n  dispatch({\n    type: dialogActionTypes.OPEN_DIALOG,\n    payload: cardId,\n  });\n};\n\nexport const closeDialog = (dispatch) => {\n  document.body.style.overflowY = 'initial';\n\n  dispatch({\n    type: dialogActionTypes.CLOSE_DIALOG,\n  });\n};\n","import Footer from './footer.component';\n\nexport default Footer;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"pa2 ph5-m ph6-l tc bg-near-black\">\n    <small className=\"pa2 f6 db tc lightest-blue\">\n      <b className=\"ttu\">GUILHERME BRUNNER</b> © 2021\n    </small>\n    <small className=\"pa2\">\n      <a href=\"https://sgtbrunner.github.io/\" rel=\"noopener noreferrer\" target=\"_blank\">\n        <div className=\"f6 dib ph2 link lightest-blue dim\">\n          Visit my <b>PORTFOLIO</b>\n        </div>\n      </a>\n    </small>\n  </footer>\n);\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/logo.3909b53b.png\";","import Header from './header.component';\n\nexport default Header;\n","import React from 'react';\n\nimport swCover from '../../../assets/img/logo.png';\nimport './header.styles.css';\n\nconst Header = () => (\n  <a href=\"#main\">\n    <div className=\"header\">\n      <img className=\"cover-image\" src={swCover} alt=\"logo\" />\n    </div>\n  </a>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getImageUrl } from '../../utils/functions.utils';\nimport './card.styles.css';\n\nconst Card = ({ name, index, openDialog }) => (\n  <button type=\"button\" onClick={openDialog} className=\"card pointer\" id={index}>\n    <img src={getImageUrl(index)} alt=\"character-portrait\" id={index} />\n    <div className=\"name\" id={index}>\n      {name}\n    </div>\n  </button>\n);\n\nCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  openDialog: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import { connect } from 'react-redux';\n\nimport { openDialog } from '../../redux/dialog/dialog.actions';\nimport Card from './card.component';\n\nconst mapDispatchToProps = (dispatch) => ({\n  openDialog: (card) => openDialog(dispatch, Number(card.target.id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Card);\n","import CardList from './cardlist.component';\n\nexport default CardList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from '../Card';\nimport './cardlist.styles.css';\n\nconst CardList = ({ characters }) =>\n  characters.length ? (\n    <div className=\"cardlist\">\n      {characters.map((character) => (\n        <Card name={character.name} index={character.id} key={character.id} />\n      ))}\n    </div>\n  ) : (\n    <div className=\"pa2 ma3 tc white-backdrop\">\n      <p1 className=\"alert-text animate-flicker\">No characters found!</p1>\n    </div>\n  );\n\nCardList.propTypes = {\n  characters: PropTypes.array.isRequired,\n};\n\nexport default CardList;\n","import SearchBox from './searchbox.component';\n\nexport default SearchBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './searchbox.styles.css';\n\nconst SearchBox = ({ searchChange }) => (\n  <div className=\"pa2 br3 searchbox\">\n    <input\n      className=\"f4 pa2 w-100 ba bw1 custom-field\"\n      type=\"search\"\n      placeholder=\"find your favorite Star Wars character...\"\n      onChange={searchChange}\n    />\n  </div>\n);\n\nSearchBox.propTypes = {\n  searchChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBox;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CardList from '../../Cardlist';\nimport SearchBox from '../../SearchBox';\nimport './main.styles.css';\n\nconst Main = ({ characters }) => {\n  const [searchField, setSearchField] = useState('');\n\n  const onSearchChange = (event) => {\n    setSearchField(event.target.value);\n  };\n\n  const filteredCharacters = characters.filter((character) =>\n    character.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div id=\"main\">\n      <SearchBox searchChange={onSearchChange} />\n      <CardList characters={filteredCharacters} />\n    </div>\n  );\n};\n\nMain.propTypes = {\n  characters: PropTypes.array,\n};\n\nMain.defaultProps = {\n  characters: [],\n};\n\nexport default Main;\n","import { connect } from 'react-redux';\n\nimport Main from './main.component';\n\nconst mapStateToProps = (state) => ({\n  characters: state.characters.data,\n});\n\nexport default connect(mapStateToProps)(Main);\n","import Loader from './loader.component';\n\nexport default Loader;\n","import React from 'react';\n\nimport './loader.styles.css';\n\nconst Loader = () => (\n  <div className=\"loader\">\n    <div className=\"loader-content animate-flicker\">Please wait...</div>\n  </div>\n);\n\nexport default Loader;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '../components/Dialog';\nimport Footer from '../components/Blocks/Footer';\nimport Header from '../components/Blocks/Header';\nimport Main from '../components/Blocks/Main';\nimport Loader from '../components/Loader';\nimport './App.css';\n\nconst App = ({\n  isCharactersLoading,\n  loadCharacters,\n  loadFilms,\n  loadPlanets,\n  loadSpecies,\n  showDialog,\n}) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      await loadCharacters();\n      loadFilms();\n      loadPlanets();\n      loadSpecies();\n    };\n\n    fetchData();\n  }, [loadCharacters, loadFilms, loadPlanets, loadSpecies]);\n\n  return isCharactersLoading ? (\n    <Loader />\n  ) : (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n      {showDialog && <Dialog />}\n    </>\n  );\n};\n\nApp.propTypes = {\n  isCharactersLoading: PropTypes.bool.isRequired,\n  loadCharacters: PropTypes.func.isRequired,\n  loadFilms: PropTypes.func.isRequired,\n  loadPlanets: PropTypes.func.isRequired,\n  loadSpecies: PropTypes.func.isRequired,\n  showDialog: PropTypes.bool.isRequired,\n};\n\nexport default App;\n","import { connect } from 'react-redux';\n\nimport loadCharacters from '../redux/characters/characters.actions';\nimport loadFilms from '../redux/films/films.actions';\nimport loadPlanets from '../redux/planets/planets.actions';\nimport loadSpecies from '../redux/species/species.actions';\nimport App from './App';\n\nconst mapStateToProps = (state) => ({\n  isCharactersLoading: !state.characters.data.length,\n  showDialog: state.dialog.isOpen,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadCharacters: () => loadCharacters(dispatch),\n  loadFilms: () => loadFilms(dispatch),\n  loadPlanets: () => loadPlanets(dispatch),\n  loadSpecies: () => loadSpecies(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { store, persistor } from './redux/store';\nimport App from './App';\nimport './index.css';\nimport 'tachyons';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}