{"version":3,"sources":["redux/characters/characters.types.js","utils/constants.utils.js","redux/characters/characters.reducer.js","redux/dialog/dialog.types.js","redux/dialog/dialog.reducer.js","redux/films/films.types.js","redux/films/films.reducer.js","redux/planets/planets.types.js","redux/planets/planets.reducer.js","redux/species/species.types.js","redux/species/species.reducer.js","redux/root-reducer.js","redux/store.js","utils/api.utils.js","utils/functions.utils.js","redux/characters/characters.actions.js","redux/films/films.actions.js","redux/planets/planets.actions.js","redux/species/species.actions.js","components/Dialog/dialog.component.jsx","components/Dialog/index.js","redux/dialog/dialog.actions.js","components/Blocks/Footer/index.js","components/Blocks/Footer/footer.component.jsx","assets/img/logo.png","components/Blocks/Header/index.js","components/Blocks/Header/header.component.jsx","components/Card/card.component.jsx","components/Card/index.js","components/Cardlist/index.js","components/Cardlist/cardlist.component.jsx","components/SearchBox/index.js","components/SearchBox/searchbox.component.jsx","components/Blocks/Main/main.component.jsx","components/Blocks/Main/index.js","components/Loader/index.js","components/Loader/loader.component.jsx","App/App.js","App/index.js","index.js"],"names":["charactersActionTypes","LOAD_CHARACTERS_START","LOAD_CHARACTERS_SUCCESS","LOAD_CHARACTERS_FAILURE","DATA_INITIAL_STATE","isLoading","data","error","DIALOG_INITIAL_STATE","isOpen","characterId","charactersReducer","state","action","type","payload","dialogActionTypes","OPEN_DIALOG","CLOSE_DIALOG","dialogReducer","filmsActionTypes","LOAD_FILMS_START","LOAD_FILMS_SUCCESS","LOAD_FILMS_FAILURE","filmsReducer","planetActionTypes","LOAD_PLANET_START","LOAD_PLANET_SUCCESS","LOAD_PLANET_FAILURE","planetsReducer","speciesActionTypes","LOAD_SPECIES_START","LOAD_SPECIES_SUCCESS","LOAD_SPECIES_FAILURE","speciesReducer","persistConfig","key","storage","blacklist","rootReducer","combineReducers","characters","films","planets","species","dialog","persistReducer","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","fetchData","a","path","url","resource","fetch","method","headers","then","response","json","push","results","next","getIdParamFromUrl","parseInt","replace","mapArrayPropertyToId","item","getImageUrl","index","Number","updateCharactersProperties","map","character","id","homeworld","loadCharactersSuccess","loadCharacters","dispatch","api","loadFilmsSuccess","loadFilms","loadPlanetsSuccess","loadPlanets","loadSpeciesSuccess","loadSpecies","deserializeStatsList","list","name","title","join","Dialog","string","isDialogDataLoaded","closeDialog","DIALOG_STATS","value","gender","toUpperCase","slice","birth_year","height","unit","mass","useEffect","events","closeOnEvent","event","keyCode","target","forEach","window","addEventListener","removeEventListener","className","role","onClick","src","alt","stat","length","every","itemLength","connect","document","body","style","overflowY","Footer","href","rel","Header","swCover","Card","openDialog","card","cardId","CardList","SearchBox","searchChange","placeholder","onChange","Main","useState","searchField","setSearchField","filteredCharacters","filter","toLowerCase","includes","defaultProps","Loader","App","isCharactersLoading","showDialog","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.56b5fd80.chunk.js","sourcesContent":["const charactersActionTypes = {\n  LOAD_CHARACTERS_START: 'LOAD_CHARACTERS_START',\n  LOAD_CHARACTERS_SUCCESS: 'LOAD_CHARACTERS_SUCCESS',\n  LOAD_CHARACTERS_FAILURE: 'LOAD_CHARACTERS_FAILURE',\n};\n\nexport default charactersActionTypes;\n","export const BASE_API_URL = 'https://swapi.dev/api/';\nexport const BASE_IMAGE_URL = 'https://starwars-visualguide.com/assets/img/characters/';\nexport const FILMS = 'films';\nexport const PEOPLE = 'people';\nexport const PLANETS = 'planets';\nexport const SPECIES = 'species';\nexport const STARSHIPS = 'starships';\nexport const VEHICLES = 'vehicles';\n\nexport const DATA_INITIAL_STATE = {\n  isLoading: false,\n  data: [],\n  error: null,\n};\n\nexport const DIALOG_INITIAL_STATE = {\n  isOpen: false,\n  characterId: null,\n};\n","import charactersActionTypes from './characters.types';\nimport { DATA_INITIAL_STATE } from '../../utils/constants.utils';\n\nconst charactersReducer = (state = DATA_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case charactersActionTypes.LOAD_CHARACTERS_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case charactersActionTypes.LOAD_CHARACTERS_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case charactersActionTypes.LOAD_CHARACTERS_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default charactersReducer;\n","const dialogActionTypes = {\n  OPEN_DIALOG: 'OPEN_DIALOG',\n  CLOSE_DIALOG: 'CLOSE_DIALOG',\n};\n\nexport default dialogActionTypes;\n","import dialogActionTypes from './dialog.types';\nimport { DIALOG_INITIAL_STATE } from '../../utils/constants.utils';\n\nconst dialogReducer = (state = DIALOG_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case dialogActionTypes.OPEN_DIALOG:\n      return {\n        ...state,\n        isOpen: true,\n        characterId: action.payload,\n      };\n    case dialogActionTypes.CLOSE_DIALOG:\n      return {\n        ...state,\n        ...DIALOG_INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dialogReducer;\n","export const filmsActionTypes = {\n  LOAD_FILMS_START: 'LOAD_FILMS_START',\n  LOAD_FILMS_SUCCESS: 'LOAD_FILMS_SUCCESS',\n  LOAD_FILMS_FAILURE: 'LOAD_FILMS_FAILURE',\n};\n\nexport default filmsActionTypes;\n","import { filmsActionTypes } from './films.types';\nimport { DATA_INITIAL_STATE } from '../../utils/constants.utils';\n\nconst filmsReducer = (state = DATA_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case filmsActionTypes.LOAD_FILMS_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case filmsActionTypes.LOAD_FILMS_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case filmsActionTypes.LOAD_FILMS_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filmsReducer;\n","const planetActionTypes = {\n  LOAD_PLANET_START: 'LOAD_PLANET_START',\n  LOAD_PLANET_SUCCESS: 'LOAD_PLANET_SUCCESS',\n  LOAD_PLANET_FAILURE: 'LOAD_PLANET_FAILURE',\n};\n\nexport default planetActionTypes;\n","import planetActionTypes from './planets.types';\nimport { DATA_INITIAL_STATE } from '../../utils/constants.utils';\n\nconst planetsReducer = (state = DATA_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case planetActionTypes.LOAD_PLANET_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case planetActionTypes.LOAD_PLANET_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case planetActionTypes.LOAD_PLANET_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default planetsReducer;\n","const speciesActionTypes = {\n  LOAD_SPECIES_START: 'LOAD_SPECIES_START',\n  LOAD_SPECIES_SUCCESS: 'LOAD_SPECIES_SUCCESS',\n  LOAD_SPECIES_FAILURE: 'LOAD_SPECIES_FAILURE',\n};\n\nexport default speciesActionTypes;\n","import speciesActionTypes from './species.types';\nimport { DATA_INITIAL_STATE } from '../../utils/constants.utils';\n\nconst speciesReducer = (state = DATA_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case speciesActionTypes.LOAD_SPECIES_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case speciesActionTypes.LOAD_SPECIES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n      };\n    case speciesActionTypes.LOAD_SPECIES_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default speciesReducer;\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport charactersReducer from './characters/characters.reducer';\nimport dialogReducer from './dialog/dialog.reducer';\nimport filmsReducer from './films/films.reducer';\nimport planetsReducer from './planets/planets.reducer';\nimport speciesReducer from './species/species.reducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['dialog'],\n};\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n  films: filmsReducer,\n  planets: planetsReducer,\n  species: speciesReducer,\n  dialog: dialogReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [thunk];\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","import { BASE_API_URL } from './constants.utils';\n\nconst fetchData = async ({ path, url, resource }) => {\n  await fetch(url || `${BASE_API_URL}${path}`, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' },\n  })\n    .then((response) => response.json())\n    .then(async (data) => {\n      resource.push(...data.results);\n      if (data.next) await fetchData({ url: data.next, resource });\n    });\n  return resource;\n};\n\nexport default {\n  getData: (path) => fetchData({ path, resource: [] }),\n};\n","import { BASE_IMAGE_URL } from './constants.utils';\n\nexport const getIdParamFromUrl = (url) => parseInt(url?.replace(/\\D/g, ''), 10);\n\nconst mapArrayPropertyToId = (item) => getIdParamFromUrl(item);\n\nexport const capitalizeFirstLetter = (string) => string[0].toUpperCase() + string.slice(1);\n\nexport const getImageUrl = (index) =>\n  typeof index === 'number' || (typeof index === 'string' && Number(index))\n    ? `${BASE_IMAGE_URL}${Number(index) < 16 ? Number(index) + 1 : Number(index) + 2}.jpg`\n    : null;\n\nexport const updateCharactersProperties = (data) =>\n  data.map((character, index) => ({\n    id: index,\n    ...character,\n    homeworld: getIdParamFromUrl(character.homeworld),\n    films: character.films.map(mapArrayPropertyToId),\n    species: character.species.map(mapArrayPropertyToId),\n  }));\n","import charactersActionTypes from './characters.types';\nimport api from '../../utils/api.utils';\nimport { PEOPLE } from '../../utils/constants.utils';\nimport { updateCharactersProperties } from '../../utils/functions.utils';\n\nconst loadCharactersStart = () => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_START,\n});\n\nconst loadCharactersSuccess = (characters) => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_SUCCESS,\n  payload: characters,\n});\n\nconst loadCharactersFailure = (error) => ({\n  type: charactersActionTypes.LOAD_CHARACTERS_FAILURE,\n  payload: error,\n});\n\nconst loadCharacters = async (dispatch) => {\n  dispatch(loadCharactersStart());\n\n  try {\n    const data = await api.getData(PEOPLE);\n    const characters = updateCharactersProperties(data);\n    dispatch(loadCharactersSuccess(characters));\n  } catch (error) {\n    dispatch(loadCharactersFailure(error));\n  }\n};\n\nexport default loadCharacters;\n","import { filmsActionTypes } from './films.types';\nimport api from '../../utils/api.utils';\nimport { FILMS } from '../../utils/constants.utils';\n\nconst loadFilmsStart = () => ({\n  type: filmsActionTypes.LOAD_FILMS_START,\n});\n\nconst loadFilmsSuccess = (films) => ({\n  type: filmsActionTypes.LOAD_FILMS_SUCCESS,\n  payload: films,\n});\n\nconst loadFilmsError = (error) => ({\n  type: filmsActionTypes.LOAD_FILMS_FAILURE,\n  payload: error,\n});\n\nconst loadFilms = async (dispatch) => {\n  dispatch(loadFilmsStart());\n  try {\n    const films = await api.getData(FILMS);\n    dispatch(loadFilmsSuccess(films));\n  } catch (error) {\n    dispatch(loadFilmsError(error));\n  }\n};\n\nexport default loadFilms;\n","import planetActionTypes from './planets.types';\nimport api from '../../utils/api.utils';\nimport { PLANETS } from '../../utils/constants.utils';\n\nconst loadPlanetsStart = () => ({\n  type: planetActionTypes.LOAD_PLANET_START,\n});\n\nconst loadPlanetsSuccess = (planets) => ({\n  type: planetActionTypes.LOAD_PLANET_SUCCESS,\n  payload: planets,\n});\n\nconst loadPlanetsFailure = (error) => ({\n  type: planetActionTypes.LOAD_PLANET_FAILURE,\n  payload: error,\n});\n\nconst loadPlanets = async (dispatch) => {\n  dispatch(loadPlanetsStart());\n\n  try {\n    const planets = await api.getData(PLANETS);\n    dispatch(loadPlanetsSuccess(planets));\n  } catch (error) {\n    dispatch(loadPlanetsFailure(error));\n  }\n};\n\nexport default loadPlanets;\n","import speciesActionTypes from './species.types';\nimport api from '../../utils/api.utils';\nimport { SPECIES } from '../../utils/constants.utils';\n\nconst loadSpeciesStart = () => ({\n  type: speciesActionTypes.LOAD_SPECIES_START,\n});\n\nconst loadSpeciesSuccess = (species) => ({\n  type: speciesActionTypes.LOAD_SPECIES_SUCCESS,\n  payload: species,\n});\n\nconst loadSpeciesFailure = (error) => ({\n  type: speciesActionTypes.LOAD_SPECIES_FAILURE,\n  payload: error,\n});\n\nconst loadSpecies = async (dispatch) => {\n  dispatch(loadSpeciesStart());\n\n  try {\n    const species = await api.getData(SPECIES);\n    dispatch(loadSpeciesSuccess(species));\n  } catch (error) {\n    dispatch(loadSpeciesFailure(error));\n  }\n};\n\nexport default loadSpecies;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getImageUrl, capitalizeFirstLetter } from '../../utils/functions.utils';\nimport './dialog.styles.css';\n\nconst deserializeStatsList = (list, type) =>\n  list.map((item) => type[item - 1]?.name || type[item - 1]?.title).join(', ');\n\nconst Dialog = ({\n  characterId,\n  characters,\n  films,\n  planets,\n  species,\n  isDialogDataLoaded,\n  closeDialog,\n}) => {\n  const character = characters[characterId];\n  const DIALOG_STATS = isDialogDataLoaded && [\n    {\n      name: 'Species',\n      value: deserializeStatsList(character.species, species) || 'Human',\n    },\n    { name: 'Gender', value: capitalizeFirstLetter(character.gender) },\n    { name: 'Birth Year', value: character.birth_year },\n    { name: 'Height', value: character.height, unit: 'cm' },\n    { name: 'Weight', value: character.mass, unit: 'Kg' },\n    { name: 'Homeworld', value: planets[character.homeworld - 1].name },\n    { name: 'Films', value: deserializeStatsList(character.films, films) },\n  ];\n\n  useEffect(() => {\n    const events = ['click', 'keydown'];\n    const closeOnEvent = (event) => {\n      if (event.keyCode === 27 || event.target.id === 'overlay') closeDialog();\n    };\n\n    events.forEach((event) => window.addEventListener(event, closeOnEvent));\n    return () => events.forEach((event) => window.removeEventListener(event, closeOnEvent));\n  }, [closeDialog]);\n\n  return (\n    <div className=\"overlay\" id=\"overlay\" role=\"dialog\">\n      {!isDialogDataLoaded ? (\n        <div className=\"dialog-load\" role=\"alert\">\n          <div className=\"dialog-loader\" />\n        </div>\n      ) : (\n        <div className=\"dialog-content\">\n          <span className=\"close\">\n            <button type=\"button\" className=\"bn pointer bg-transparent\" onClick={closeDialog}>\n              &times;\n            </button>\n          </span>\n          <div className=\"stats-list\">\n            <img src={getImageUrl(character.id)} className=\"portrait\" alt={character.id} />\n            <div className=\"char-name\">{character.name}</div>\n            {DIALOG_STATS.map((stat) => (\n              <div className=\"stats\" key={stat.name} role=\"listitem\">\n                <u>{stat.name}</u>\n                {`: ${stat.value} ${stat.unit && stat.value !== 'unknown' ? stat.unit : ''}`}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nDialog.propTypes = {\n  characterId: PropTypes.number.isRequired,\n  characters: PropTypes.array.isRequired,\n  films: PropTypes.array.isRequired,\n  planets: PropTypes.array.isRequired,\n  species: PropTypes.array.isRequired,\n  isDialogDataLoaded: PropTypes.bool.isRequired,\n  closeDialog: PropTypes.func.isRequired,\n};\n\nexport default Dialog;\n","import { connect } from 'react-redux';\n\nimport { closeDialog } from '../../redux/dialog/dialog.actions';\nimport Dialog from './dialog.component';\n\nconst isDialogDataLoaded = (state) => {\n  const { films, planets, species } = state;\n  return [films.data.length, planets.data.length, species.data.length].every(\n    (itemLength) => itemLength\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  characterId: state.dialog.characterId,\n  characters: state.characters.data,\n  films: state.films.data,\n  planets: state.planets.data,\n  species: state.species.data,\n  isDialogDataLoaded: isDialogDataLoaded(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  closeDialog: () => closeDialog(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dialog);\n","import dialogActionTypes from './dialog.types';\n\nexport const openDialog = (dispatch, cardId) => {\n  document.body.style.overflowY = 'hidden';\n\n  dispatch({\n    type: dialogActionTypes.OPEN_DIALOG,\n    payload: cardId,\n  });\n};\n\nexport const closeDialog = (dispatch) => {\n  document.body.style.overflowY = 'initial';\n\n  dispatch({\n    type: dialogActionTypes.CLOSE_DIALOG,\n  });\n};\n","import Footer from './footer.component';\n\nexport default Footer;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"pa2 ph5-m ph6-l tc bg-near-black\">\n    <small className=\"pa2 f6 db tc lightest-blue\">\n      <b className=\"ttu\">GUILHERME BRUNNER</b> 2021\n    </small>\n    <small className=\"pa2\">\n      <a href=\"https://sgtbrunner.github.io/\" rel=\"noopener noreferrer\" target=\"_blank\">\n        <div className=\"f6 dib ph2 link lightest-blue dim\">\n          Visit my <b>PORTFOLIO</b>\n        </div>\n      </a>\n    </small>\n  </footer>\n);\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/logo.3909b53b.png\";","import Header from './header.component';\n\nexport default Header;\n","import React from 'react';\n\nimport swCover from '../../../assets/img/logo.png';\nimport './header.styles.css';\n\nconst Header = () => (\n  <a href=\"#main\">\n    <div className=\"header\">\n      <img className=\"cover-image\" src={swCover} alt=\"logo\" />\n    </div>\n  </a>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getImageUrl } from '../../utils/functions.utils';\nimport './card.styles.css';\n\nconst Card = ({ name, index, openDialog }) => (\n  <button id={index} type=\"button\" onClick={openDialog} className=\"card pointer\">\n    <img src={getImageUrl(index)} alt=\"character-portrait\" id={index} />\n    <div className=\"name\" id={index}>\n      {name}\n    </div>\n  </button>\n);\n\nCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  openDialog: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import { connect } from 'react-redux';\n\nimport { openDialog } from '../../redux/dialog/dialog.actions';\nimport Card from './card.component';\n\nconst mapDispatchToProps = (dispatch) => ({\n  openDialog: (card) => openDialog(dispatch, Number(card.target.id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Card);\n","import CardList from './cardlist.component';\n\nexport default CardList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from '../Card';\nimport './cardlist.styles.css';\n\nconst CardList = ({ characters }) =>\n  characters.length ? (\n    <div className=\"cardlist\">\n      {characters.map((character) => (\n        <Card name={character.name} index={character.id} key={character.id} />\n      ))}\n    </div>\n  ) : (\n    <div className=\"pa2 ma3 tc white-backdrop\" role=\"alert\">\n      <p className=\"alert-text animate-flicker\">No characters found!</p>\n    </div>\n  );\n\nCardList.propTypes = {\n  characters: PropTypes.array.isRequired,\n};\n\nexport default CardList;\n","import SearchBox from './searchbox.component';\n\nexport default SearchBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './searchbox.styles.css';\n\nconst SearchBox = ({ searchChange }) => (\n  <div className=\"pa2 br3 searchbox\">\n    <input\n      className=\"f4 pa2 w-100 ba bw1 custom-field\"\n      type=\"search\"\n      placeholder=\"find your favorite Star Wars character...\"\n      onChange={searchChange}\n    />\n  </div>\n);\n\nSearchBox.propTypes = {\n  searchChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBox;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CardList from '../../Cardlist';\nimport SearchBox from '../../SearchBox';\nimport './main.styles.css';\n\nconst Main = ({ characters }) => {\n  const [searchField, setSearchField] = useState('');\n\n  const onSearchChange = (event) => {\n    setSearchField(event.target.value);\n  };\n\n  const filteredCharacters = characters.filter((character) =>\n    character.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div id=\"main\">\n      <SearchBox searchChange={onSearchChange} />\n      <CardList characters={filteredCharacters} />\n    </div>\n  );\n};\n\nMain.propTypes = {\n  characters: PropTypes.array,\n};\n\nMain.defaultProps = {\n  characters: [],\n};\n\nexport default Main;\n","import { connect } from 'react-redux';\n\nimport Main from './main.component';\n\nconst mapStateToProps = (state) => ({\n  characters: state.characters.data,\n});\n\nexport default connect(mapStateToProps)(Main);\n","import Loader from './loader.component';\n\nexport default Loader;\n","import React from 'react';\n\nimport './loader.styles.css';\n\nconst Loader = () => (\n  <div className=\"loader\">\n    <div className=\"loader-content animate-flicker\">Please wait...</div>\n  </div>\n);\n\nexport default Loader;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '../components/Dialog';\nimport Footer from '../components/Blocks/Footer';\nimport Header from '../components/Blocks/Header';\nimport Main from '../components/Blocks/Main';\nimport Loader from '../components/Loader';\nimport './App.css';\n\nconst App = ({\n  isCharactersLoading,\n  loadCharacters,\n  loadFilms,\n  loadPlanets,\n  loadSpecies,\n  showDialog,\n}) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      await loadCharacters();\n      loadFilms();\n      loadPlanets();\n      loadSpecies();\n    };\n\n    fetchData();\n  }, [loadCharacters, loadFilms, loadPlanets, loadSpecies]);\n\n  return isCharactersLoading ? (\n    <Loader />\n  ) : (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n      {showDialog && <Dialog />}\n    </>\n  );\n};\n\nApp.propTypes = {\n  isCharactersLoading: PropTypes.bool.isRequired,\n  loadCharacters: PropTypes.func.isRequired,\n  loadFilms: PropTypes.func.isRequired,\n  loadPlanets: PropTypes.func.isRequired,\n  loadSpecies: PropTypes.func.isRequired,\n  showDialog: PropTypes.bool.isRequired,\n};\n\nexport default App;\n","import { connect } from 'react-redux';\n\nimport loadCharacters from '../redux/characters/characters.actions';\nimport loadFilms from '../redux/films/films.actions';\nimport loadPlanets from '../redux/planets/planets.actions';\nimport loadSpecies from '../redux/species/species.actions';\nimport App from './App';\n\nconst mapStateToProps = (state) => ({\n  isCharactersLoading: !state.characters.data.length,\n  showDialog: state.dialog.isOpen,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadCharacters: () => loadCharacters(dispatch),\n  loadFilms: () => loadFilms(dispatch),\n  loadPlanets: () => loadPlanets(dispatch),\n  loadSpecies: () => loadSpecies(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { store, persistor } from './redux/store';\nimport App from './App';\nimport './index.css';\nimport 'tachyons';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}